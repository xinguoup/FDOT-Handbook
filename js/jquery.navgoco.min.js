/*
 * jQuery Navgoco Menus Plugin v0.2.1 (2014-04-11)
 * https://github.com/tefra/navgoco
 *
 * Copyright (c) 2014 Chris T (@tefra)
 * BSD - https://github.com/tefra/navgoco/blob/master/LICENSE-BSD
 */
(function ($) {
    "use strict";

    var Navgoco = function (el, options, id) {
        this.el = el;
        this.$el = $(el);
        this.options = options;
        this.uuid = this.$el.attr("id") ? this.$el.attr("id") : id;
        this.state = {};
        this.init();
        return this;
    };

    Navgoco.prototype = {
        init: function () {
            var self = this;

            self._load();

            self.$el.find("ul").each(function (index) {
                var $ul = $(this);
                $ul.attr("data-index", index);

                if (self.options.save && self.state.hasOwnProperty(index)) {
                    $ul.parent().addClass(self.options.openClass);
                    $ul.show();
                } else if ($ul.parent().hasClass(self.options.openClass)) {
                    $ul.show();
                    self.state[index] = 1;
                } else {
                    $ul.hide();
                }
            });

            var caret = $("<span></span>").prepend(self.options.caretHtml);
            var links = self.$el.find("li > a");

            self._trigger(caret, false);
            self._trigger(links, true);

            self.$el.find("li:has(ul) > a").prepend(caret);
        },

        _trigger: function (element, isLink) {
            var self = this;
        
            element.on("click", function (event) {
                event.stopPropagation();
        
                var $target = isLink ? $(this).next() : $(this).parent().next();
                var preventDefault = false;
        
                if (isLink) {
                    var href = $(this).attr("href");
                    preventDefault = (typeof href === "undefined" || href === "" || href === "#");
                }
        
                $target = $target.length > 0 ? $target : false;
        
                self.options.onClickBefore.call(this, event, $target);
        
                // Only prevent default and toggle if it's a title (with a list)
                if (!isLink || ($target && preventDefault)) {
                    event.preventDefault();
        
                    var wasHidden = $target.is(":hidden");  // Check if the target was hidden before toggling
                    self._toggle($target, wasHidden);       // Toggle the visibility (show/hide)
                    self._save();
        
                    // Only trigger the redirection if the list was hidden (i.e., the list is now being shown)
                    if ($target && $target.is("ul") && wasHidden) {
                        var $firstSubtitleLink = $target.find("li > a").first(); // Get the first subtitle link
                        if ($firstSubtitleLink.length) {
                            var firstSubtitleUrl = $firstSubtitleLink.attr("href");
                            if (firstSubtitleUrl && firstSubtitleUrl !== "#") {
                                setTimeout(function() {
                                    window.location.href = firstSubtitleUrl; // Redirect after a brief delay for smoothness
                                }, 100); // 100ms delay for smooth transition
                            }
                        }
                    }
                } else if (self.options.accordion) {
                    var state = self.state = self._parents($(this));
                    self.$el.find("ul").filter(":visible").each(function () {
                        var $visibleUl = $(this),
                            index = $visibleUl.attr("data-index");
        
                        if (!state.hasOwnProperty(index)) {
                            self._toggle($visibleUl, false);
                        }
                    });
                    self._save();
                }
        
                self.options.onClickAfter.call(this, event, $target);
            });
        },
        
        

        _toggle: function ($ul, show) {
            var self = this,
                index = $ul.attr("data-index"),
                $parent = $ul.parent();

            self.options.onToggleBefore.call(this, $ul, show);

            if (show) {
                $parent.addClass(self.options.openClass);
                $ul.slideDown(self.options.slide);
                self.state[index] = 1;

                if (self.options.accordion) {
                    var state = self.state = self._parents($ul);
                    state[index] = self.state[index] = 1;

                    self.$el.find("ul").filter(":visible").each(function () {
                        var $visibleUl = $(this),
                            visibleIndex = $visibleUl.attr("data-index");

                        if (!state.hasOwnProperty(visibleIndex)) {
                            self._toggle($visibleUl, false);
                        }
                    });
                }
            } else {
                $parent.removeClass(self.options.openClass);
                $ul.slideUp(self.options.slide);
                self.state[index] = 0;
            }

            self.options.onToggleAfter.call(this, $ul, show);
        },

        _parents: function ($el, includeSelf) {
            var parents = {},
                $parent = $el.parent(),
                $ancestorUls = $parent.parents("ul");

            $ancestorUls.each(function () {
                var $ancestorUl = $(this),
                    index = $ancestorUl.attr("data-index");

                if (index) {
                    parents[index] = includeSelf ? $ancestorUl : 1;
                }
            });

            return parents;
        },

        _save: function () {
            if (this.options.save) {
                var state = {};

                for (var key in this.state) {
                    if (this.state[key] === 1) {
                        state[key] = 1;
                    }
                }

                c[this.uuid] = this.state = state;
                $.cookie(this.options.cookie.name, JSON.stringify(c), this.options.cookie);
            }
        },

        _load: function () {
            if (this.options.save) {
                if (c === null) {
                    var cookie = $.cookie(this.options.cookie.name);
                    c = cookie ? JSON.parse(cookie) : {};
                }
                this.state = c.hasOwnProperty(this.uuid) ? c[this.uuid] : {};
            }
        },

        toggle: function (state) {
            var self = this,
                argsLength = arguments.length;

            if (argsLength <= 1) {
                self.$el.find("ul").each(function () {
                    var $ul = $(this);
                    self._toggle($ul, state);
                });
            } else {
                var args = Array.prototype.slice.call(arguments, 1),
                    parents = {};

                for (var i = 0; i < args.length; i++) {
                    var index = args[i],
                        $ul = self.$el.find('ul[data-index="' + index + '"]').first();

                    if ($ul && (parents[index] = $ul) && state) {
                        var ancestors = self._parents($ul, true);
                        for (var key in ancestors) {
                            if (!parents.hasOwnProperty(key)) {
                                parents[key] = ancestors[key];
                            }
                        }
                    }
                }

                for (var key in parents) {
                    self._toggle(parents[key], state);
                }
            }

            self._save();
        },

        destroy: function () {
            $.removeData(this.$el);
            this.$el.find("li:has(ul) > a").unbind("click");
            this.$el.find("li:has(ul) > a > span").unbind("click");
        }
    };

    $.fn.navgoco = function (methodOrOptions) {
        if (typeof methodOrOptions === "string" && methodOrOptions.charAt(0) !== "_" && methodOrOptions !== "init") {
            var isMethodCall = true,
                args = Array.prototype.slice.call(arguments, 1);
        } else {
            methodOrOptions = $.extend({}, $.fn.navgoco.defaults, methodOrOptions || {});
            if (!$.cookie) {
                methodOrOptions.save = false;
            }
        }

        return this.each(function (index) {
            var $el = $(this),
                instance = $el.data("navgoco");

            if (!instance) {
                instance = new Navgoco(this, isMethodCall ? $.fn.navgoco.defaults : methodOrOptions, index);
                $el.data("navgoco", instance);
            }

            if (isMethodCall) {
                instance[methodOrOptions].apply(instance, args);
            }
        });
    };

    var c = null;

    $.fn.navgoco.defaults = {
        caretHtml: "",
        accordion: false,
        openClass: "open",
        save: true,
        cookie: {
            name: "navgoco",
            expires: false,
            path: "/"
        },
        slide: {
            duration: 400,
            easing: "swing"
        },
        onClickBefore: $.noop,
        onClickAfter: $.noop,
        onToggleBefore: $.noop,
        onToggleAfter: $.noop
    };
})(jQuery);
